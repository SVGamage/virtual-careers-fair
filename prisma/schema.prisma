generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum INTERVIEW_STATUS {
  SCHEDULED
  COMPLETED
  CANCELED
}

enum REQUEST_STATUS {
  PENDING
  ACCEPTED
  REJECTED
}

enum USER_TYPE {
  STUDENT
  COMPANY
  UNIVERSITY
}

enum GENDER {
  MALE
  FEMALE
  OTHER
}

enum JOB_TYPE {
  FULL_TIME
  PART_TIME
  INTERNSHIP
}

enum WORK_MODE {
  REMOTE
  ONSITE
}

model UserAccount {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  password  String
  userType  USER_TYPE
  createdAt DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt DateTime  @updatedAt @db.Timestamptz(6)

  student    Student?
  company    Company?
  university University?
}

model Student {
  id                Int      @id @default(autoincrement())
  firstName         String
  lastName          String
  bio               String
  gender            GENDER
  dob               DateTime @db.Timestamptz()
  age               Int
  profilePic        String
  userAccountId     Int      @unique
  degreeProgrammeId Int

  interviews         Interview[]
  studentRoles       StudentRole[]
  studentSkills      StudentSkill[]
  interviewRequests  InterviewRequest[]
  careersDayStudents CareersDayStudent[]
  userAccount        UserAccount         @relation(fields: [userAccountId], references: [id])
  degreeProgramme    DegreeProgramme     @relation(fields: [degreeProgrammeId], references: [id])
}

model University {
  id             Int    @id @default(autoincrement())
  universityName String
  location       String
  description    String
  logo           String
  userAccountId  Int    @unique

  departments        Department[]
  careersDays        CareersDay[]
  partneredCompanies PartneredCompany[]
  userAccount        UserAccount        @relation(fields: [userAccountId], references: [id])
}

model Department {
  id             Int    @id @default(autoincrement())
  departmentName String
  description    String
  logo           String
  universityId   Int

  degreeProgrammes DegreeProgramme[]
  university       University        @relation(fields: [universityId], references: [id])
}

model DegreeProgramme {
  id            Int    @id @default(autoincrement())
  degreeName    String
  description   String
  intake        Int
  academicYears Int
  departmentId  Int

  students   Student[]
  department Department @relation(fields: [departmentId], references: [id])
}

model Company {
  id              Int    @id @default(autoincrement())
  companyName     String
  description     String
  logo            String
  employeeCount   Int
  industryFieldId Int
  userAccountId   Int    @unique

  interviews          Interview[]
  vacancies           Vacancy[]
  interviewRequests   InterviewRequest[]
  careersDayCompanies CareersDayCompany[]
  partneredCompanies  PartneredCompany[]
  industryField       IndustryField       @relation(fields: [industryFieldId], references: [id])
  userAccount         UserAccount         @relation(fields: [userAccountId], references: [id])
}

model IndustryField {
  id           Int    @id @default(autoincrement())
  industryName String

  companies Company[]
}

model Vacancy {
  id           Int       @id @default(autoincrement())
  jobRoleId    Int
  description  String
  companyId    Int
  salary       Int
  jobType      JOB_TYPE
  vacancies    Int
  workMode     WORK_MODE
  hoursPerWeek Int
  experience   Int

  vacancySkills VacancySkill[]
  company       Company        @relation(fields: [companyId], references: [id])
  jobRole       JobRole        @relation(fields: [jobRoleId], references: [id])
}

model StudentRole {
  id        Int @id @default(autoincrement())
  roleId    Int
  studentId Int

  role    JobRole @relation(fields: [roleId], references: [id])
  student Student @relation(fields: [studentId], references: [id])
}

model JobRole {
  id       Int    @id @default(autoincrement())
  roleName String

  vacancies    Vacancy[]
  studentRoles StudentRole[]
}

model PartneredCompany {
  id                Int            @id @default(autoincrement())
  companyId         Int
  universityId      Int
  partnershipStatus REQUEST_STATUS
  date              DateTime       @db.Timestamptz()

  company    Company    @relation(fields: [companyId], references: [id])
  university University @relation(fields: [universityId], references: [id])
}

model CareersDay {
  id           Int      @id @default(autoincrement())
  start        DateTime @db.Timestamptz()
  end          DateTime @db.Timestamptz()
  universityId Int

  interviews          Interview[]
  interviewRequests   InterviewRequest[]
  careersDayStudents  CareersDayStudent[]
  careersDayCompanies CareersDayCompany[]
  university          University          @relation(fields: [universityId], references: [id])
}

model CareersDayStudent {
  id             Int            @id @default(autoincrement())
  studentId      Int
  careersDayId   Int
  registerStatus REQUEST_STATUS

  student    Student    @relation(fields: [studentId], references: [id])
  careersDay CareersDay @relation(fields: [careersDayId], references: [id])
}

model CareersDayCompany {
  id             Int            @id @default(autoincrement())
  companyId      Int
  careersDayId   Int
  registerStatus REQUEST_STATUS

  company    Company    @relation(fields: [companyId], references: [id])
  careersDay CareersDay @relation(fields: [careersDayId], references: [id])
}

model Interview {
  id                 Int              @id @default(autoincrement())
  interviewRequestId Int
  studentId          Int
  companyId          Int
  careerDayId        Int
  start              DateTime         @db.Timestamptz()
  end                DateTime         @db.Timestamptz()
  interviewStatus    INTERVIEW_STATUS

  student          Student          @relation(fields: [studentId], references: [id])
  company          Company          @relation(fields: [companyId], references: [id])
  interviewRequest InterviewRequest @relation(fields: [interviewRequestId], references: [id])
  careersDay       CareersDay       @relation(fields: [careerDayId], references: [id])
}

model InterviewRequest {
  id              Int            @id @default(autoincrement())
  studentId       Int
  companyId       Int
  careerDayId     Int
  requestStatus   REQUEST_STATUS
  requestDateTime DateTime       @db.Timestamptz()

  interviews Interview[]
  student    Student     @relation(fields: [studentId], references: [id])
  company    Company     @relation(fields: [companyId], references: [id])
  careersDay CareersDay  @relation(fields: [careerDayId], references: [id])
}

model Skill {
  id          Int    @id @default(autoincrement())
  name        String
  description String
  logo        String

  studentSkills StudentSkill[]
  vacancySkills VacancySkill[]
}

model StudentSkill {
  id         Int @id @default(autoincrement())
  studentId  Int
  skillId    Int
  skillLevel Int

  student Student @relation(fields: [studentId], references: [id])
  skill   Skill   @relation(fields: [skillId], references: [id])
}

model VacancySkill {
  id        Int @id @default(autoincrement())
  vacancyId Int
  skillId   Int

  vacancy Vacancy @relation(fields: [vacancyId], references: [id])
  skill   Skill   @relation(fields: [skillId], references: [id])
}
